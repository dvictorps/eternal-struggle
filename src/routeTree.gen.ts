/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as McpRouteImport } from './routes/mcp'
import { Route as CharactersRouteImport } from './routes/characters'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SignInSplatRouteImport } from './routes/sign-in.$'
import { Route as AdminLayoutRouteImport } from './routes/admin/_layout'
import { Route as AdminLayoutIndexRouteImport } from './routes/admin/_layout/index'
import { Route as ApiAuthSplatRouteImport } from './routes/api.auth.$'
import { Route as AdminLayoutItemsRouteImport } from './routes/admin/_layout/items'

const AdminRouteImport = createFileRoute('/admin')()

const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const McpRoute = McpRouteImport.update({
  id: '/mcp',
  path: '/mcp',
  getParentRoute: () => rootRouteImport,
} as any)
const CharactersRoute = CharactersRouteImport.update({
  id: '/characters',
  path: '/characters',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInSplatRoute = SignInSplatRouteImport.update({
  id: '/sign-in/$',
  path: '/sign-in/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminLayoutRoute = AdminLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AdminRoute,
} as any)
const AdminLayoutIndexRoute = AdminLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminLayoutRoute,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminLayoutItemsRoute = AdminLayoutItemsRouteImport.update({
  id: '/items',
  path: '/items',
  getParentRoute: () => AdminLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/characters': typeof CharactersRoute
  '/mcp': typeof McpRoute
  '/register': typeof RegisterRoute
  '/admin': typeof AdminLayoutRouteWithChildren
  '/sign-in/$': typeof SignInSplatRoute
  '/admin/items': typeof AdminLayoutItemsRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/admin/': typeof AdminLayoutIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/characters': typeof CharactersRoute
  '/mcp': typeof McpRoute
  '/register': typeof RegisterRoute
  '/admin': typeof AdminLayoutIndexRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/admin/items': typeof AdminLayoutItemsRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/characters': typeof CharactersRoute
  '/mcp': typeof McpRoute
  '/register': typeof RegisterRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/_layout': typeof AdminLayoutRouteWithChildren
  '/sign-in/$': typeof SignInSplatRoute
  '/admin/_layout/items': typeof AdminLayoutItemsRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/admin/_layout/': typeof AdminLayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/characters'
    | '/mcp'
    | '/register'
    | '/admin'
    | '/sign-in/$'
    | '/admin/items'
    | '/api/auth/$'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/characters'
    | '/mcp'
    | '/register'
    | '/admin'
    | '/sign-in/$'
    | '/admin/items'
    | '/api/auth/$'
  id:
    | '__root__'
    | '/'
    | '/characters'
    | '/mcp'
    | '/register'
    | '/admin'
    | '/admin/_layout'
    | '/sign-in/$'
    | '/admin/_layout/items'
    | '/api/auth/$'
    | '/admin/_layout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CharactersRoute: typeof CharactersRoute
  McpRoute: typeof McpRoute
  RegisterRoute: typeof RegisterRoute
  AdminRoute: typeof AdminRouteWithChildren
  SignInSplatRoute: typeof SignInSplatRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mcp': {
      id: '/mcp'
      path: '/mcp'
      fullPath: '/mcp'
      preLoaderRoute: typeof McpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/characters': {
      id: '/characters'
      path: '/characters'
      fullPath: '/characters'
      preLoaderRoute: typeof CharactersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in/$': {
      id: '/sign-in/$'
      path: '/sign-in/$'
      fullPath: '/sign-in/$'
      preLoaderRoute: typeof SignInSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/_layout': {
      id: '/admin/_layout'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminLayoutRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/_layout/': {
      id: '/admin/_layout/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminLayoutIndexRouteImport
      parentRoute: typeof AdminLayoutRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/_layout/items': {
      id: '/admin/_layout/items'
      path: '/items'
      fullPath: '/admin/items'
      preLoaderRoute: typeof AdminLayoutItemsRouteImport
      parentRoute: typeof AdminLayoutRoute
    }
  }
}

interface AdminLayoutRouteChildren {
  AdminLayoutItemsRoute: typeof AdminLayoutItemsRoute
  AdminLayoutIndexRoute: typeof AdminLayoutIndexRoute
}

const AdminLayoutRouteChildren: AdminLayoutRouteChildren = {
  AdminLayoutItemsRoute: AdminLayoutItemsRoute,
  AdminLayoutIndexRoute: AdminLayoutIndexRoute,
}

const AdminLayoutRouteWithChildren = AdminLayoutRoute._addFileChildren(
  AdminLayoutRouteChildren,
)

interface AdminRouteChildren {
  AdminLayoutRoute: typeof AdminLayoutRouteWithChildren
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminLayoutRoute: AdminLayoutRouteWithChildren,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CharactersRoute: CharactersRoute,
  McpRoute: McpRoute,
  RegisterRoute: RegisterRoute,
  AdminRoute: AdminRouteWithChildren,
  SignInSplatRoute: SignInSplatRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
